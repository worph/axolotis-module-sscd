{
  "version": 3,
  "sources": ["../../../node_modules/inversify/src/constants/metadata_keys.ts", "../../../node_modules/inversify/src/constants/literal_types.ts", "../../../node_modules/inversify/src/utils/id.ts", "../../../node_modules/inversify/src/bindings/binding.ts", "../../../node_modules/inversify/src/constants/error_msgs.ts", "../../../node_modules/inversify/src/planning/metadata_reader.ts", "../../../node_modules/inversify/src/bindings/binding_count.ts", "../../../node_modules/inversify/src/utils/exceptions.ts", "../../../node_modules/inversify/src/utils/serialization.ts", "../../../node_modules/inversify/src/planning/context.ts", "../../../node_modules/inversify/src/planning/metadata.ts", "../../../node_modules/inversify/src/planning/plan.ts", "../../../node_modules/inversify/src/annotation/lazy_service_identifier.ts", "../../../node_modules/inversify/src/planning/queryable_string.ts", "../../../node_modules/inversify/src/planning/target.ts", "../../../node_modules/inversify/src/planning/reflection_utils.ts", "../../../node_modules/inversify/src/planning/request.ts", "../../../node_modules/inversify/src/planning/planner.ts", "../../../node_modules/inversify/src/utils/async.ts", "../../../node_modules/inversify/src/scope/scope.ts", "../../../node_modules/inversify/src/utils/factory_type.ts", "../../../node_modules/inversify/src/utils/binding_utils.ts", "../../../node_modules/inversify/src/resolution/instantiation.ts", "../../../node_modules/inversify/src/resolution/resolver.ts", "../../../node_modules/inversify/src/syntax/constraint_helpers.ts", "../../../node_modules/inversify/src/syntax/binding_when_syntax.ts", "../../../node_modules/inversify/src/syntax/binding_on_syntax.ts", "../../../node_modules/inversify/src/syntax/binding_when_on_syntax.ts", "../../../node_modules/inversify/src/syntax/binding_in_syntax.ts", "../../../node_modules/inversify/src/syntax/binding_in_when_on_syntax.ts", "../../../node_modules/inversify/src/syntax/binding_to_syntax.ts", "../../../node_modules/inversify/src/container/container_snapshot.ts", "../../../node_modules/inversify/src/utils/clonable.ts", "../../../node_modules/inversify/src/container/lookup.ts", "../../../node_modules/inversify/src/container/module_activation_store.ts", "../../../node_modules/inversify/src/container/container.ts", "../../../node_modules/inversify/src/container/container_module.ts", "../../../node_modules/inversify/src/utils/js.ts", "../../../node_modules/inversify/src/annotation/decorator_utils.ts", "../../../node_modules/inversify/src/annotation/injectable.ts", "../../../node_modules/inversify/src/annotation/tagged.ts", "../../../node_modules/inversify/src/annotation/named.ts", "../../../node_modules/inversify/src/annotation/inject_base.ts", "../../../node_modules/inversify/src/annotation/inject.ts", "../../../node_modules/inversify/src/annotation/optional.ts", "../../../node_modules/inversify/src/annotation/unmanaged.ts", "../../../node_modules/inversify/src/annotation/multi_inject.ts", "../../../node_modules/inversify/src/annotation/target_name.ts", "../../../node_modules/inversify/src/annotation/property_event_decorator.ts", "../../../node_modules/inversify/src/annotation/post_construct.ts", "../../../node_modules/inversify/src/annotation/pre_destroy.ts", "../../../node_modules/inversify/src/interfaces/interfaces.ts", "../../../node_modules/inversify/src/inversify.ts", "../../../node_modules/eventemitter3/index.js", "../src/index.ts", "../src/services/src/sscdNameSpace.js", "../src/services/src/shapes/capsule.js", "../src/services/src/shapes/circle.js", "../src/services/src/shapes/composite_shape.js", "../src/services/src/shapes/line.js", "../src/services/src/shapes/lines_strip.js", "../src/services/src/shapes/rectangle.js", "../src/services/src/shapes/shape.js", "../src/services/src/shapes/shapes_collider.js", "../src/services/src/utils/aabb.js", "../src/services/src/utils/extend.js", "../src/services/src/utils/math.js", "../src/services/src/utils/vector.js", "../src/services/src/world.js", "../src/services/src/tilemap.js", "../src/services/simple-collision/SimpleCollisionDetection.ts", "../src/Identifier.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {\r\n    SimpleCollisionDetection\r\n} from \"./services/simple-collision/SimpleCollisionDetection\";\r\nimport {SimpleCollisionDetectionName} from \"./Identifier\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxSSCDModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(SimpleCollisionDetectionName).toDynamicValue(() => {\r\n                return new SimpleCollisionDetection()\r\n            }).inSingletonScope();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n", "// set namespace\nexport var SSCD = SSCD || {};\n", "/*\n * a special shape made from multiple shapes combined together\n * Author: Ronen Ness, 2015\n */\n \n// create a capsule shape. implemented by a composite-shape with two circles and a rectangle.\n// @param position - optional starting position (vector)\n// @param size - size in pixels (vector)\n// @param standing - if true, capsule will be standing. else, will lie down. (default: true)\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.Capsule = function(position, size, standing) {\n\t// call init chain\n\tthis.init();\n\n\t// default standing\n\tif (standing === undefined) standing = true;\n\n\t// create objects\n\tlet objects = [];\n\tif (standing) {\n\t\tsize = size.clone();\n\t\tsize.y -= size.x;\n\t\tobjects.push(new SSCD.Rectangle(new SSCD.Vector(-size.x * 0.5, -size.y * 0.5), size));\n\t\tobjects.push(new SSCD.Circle(new SSCD.Vector(0, -size.y * 0.5), size.x * 0.5));\n\t\tobjects.push(new SSCD.Circle(new SSCD.Vector(0, size.y * 0.5), size.x * 0.5));\n\t} else {\n\t\tsize = size.clone();\n\t\tsize.y -= size.x;\n\t\tobjects.push(new SSCD.Rectangle(new SSCD.Vector(-size.y * 0.5, -size.x * 0.5), size.flip()));\n\t\tobjects.push(new SSCD.Circle(new SSCD.Vector(-size.y * 0.5, 0), size.x * 0.5));\n\t\tobjects.push(new SSCD.Circle(new SSCD.Vector(size.y * 0.5, 0), size.x * 0.5));\n\t}\n\n\t// init composite shape\n\tthis.__init_comp_shape(position, objects);\n};\n\n// Capsule prototype\nSSCD.Capsule.prototype = {\n\n\t__type: \"capsule\",\n\n};\n\n// inherit from CompositeShape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.CompositeShape.prototype, SSCD.Capsule.prototype);\n", "/*\n * A circle collision shape\n * Author: Ronen Ness, 2015\n */\n \n// define the circle shape\n// @param position - center position (vector)\n// @param radius - circle radius (integer)\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.Circle = function(position, radius) {\n\t// call init chain\n\tthis.init();\n\n\t// set radius and size\n\tthis.__radius = radius;\n\tthis.__size = new SSCD.Vector(radius, radius).multiply_scalar_self(2);\n\n\t// set starting position\n\tthis.set_position(position);\n};\n\n// Circle prototype\nSSCD.Circle.prototype = {\n\n\t// set type and collision type\n\t__type: \"circle\",\n\t__collision_type: \"circle\",\n\n\t// render (for debug purposes)\n\t// @param ctx - 2d context of a canvas\n\t// @param camera_pos - optional camera position to transform the render position\n\trender: function(ctx, camera_pos) {\n\t\t// apply camera on position\n\t\tvar position = this.__position.sub(camera_pos);\n\n\t\t// draw the circle\n\t\tctx.beginPath();\n\t\tctx.arc(position.x, position.y, this.__radius, 0, 2 * Math.PI, false);\n\n\t\t// draw stroke\n\t\tctx.lineWidth = \"7\";\n\t\tctx.strokeStyle = this.__get_render_stroke_color(0.75);\n\t\tctx.stroke();\n\n\t\t// draw fill\n\t\tctx.fillStyle = this.__get_render_fill_color(0.35);\n\t\tctx.fill();\n\t},\n\n\t// return circle radius\n\tget_radius: function() {\n\t\treturn this.__radius;\n\t},\n\n\t// called to update axis-aligned-bounding-box position\n\t__update_aabb_pos: function() {\n\t\tthis.__aabb.position = this.__position.sub_scalar(this.__radius);\n\t},\n\n\t// return axis-aligned-bounding-box\n\tbuild_aabb: function() {\n\t\treturn new SSCD.AABB(this.__position.sub_scalar(this.__radius), this.__size);\n\t},\n\n\t// return the absolute center of the shape\n\tget_abs_center: function() {\n\t\treturn this.__position.clone();\n\t},\n\n};\n\n// inherit from basic shape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.Shape.prototype, SSCD.Circle.prototype);\n", "/*\n * a special shape made from multiple shapes combined together\n * Author: Ronen Ness, 2015\n */\n \n// create a composite shape\n// @param position - optional starting position (vector)\n// @param objects - optional list of collision objects to start with\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.CompositeShape = function(position, objects) {\n\t// call init chain\n\tthis.init();\n\tthis.__init_comp_shape(position, objects);\n};\n\n// composite shape prototype\nSSCD.CompositeShape.prototype = {\n\n\t// set type and collision type\n\t__type: \"composite-shape\",\n\t__collision_type: \"composite-shape\",\n\n\t// init the composite shape.\n\t// @param position - source position.\n\t// @param objects - list of starting objects.\n\t__init_comp_shape: function(position, objects) {\n\t\t// create empty list of shapes\n\t\tthis.__shapes = [];\n\n\t\t// default position\n\t\tposition = position || SSCD.Vector.ZERO;\n\t\tthis.set_position(position);\n\n\t\t// add objects if provided\n\t\tif (objects) {\n\t\t\tfor (var i = 0; i < objects.length; ++i) {\n\t\t\t\tthis.add(objects[i]);\n\t\t\t}\n\t\t}\n\t},\n\n\t// render (for debug purposes).\n\t// @param ctx - 2d context of a canvas.\n\t// @param camera_pos - optional camera position to transform the render position.\n\trender: function(ctx, camera_pos) {\n\t\t// first render all shapes\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tthis.__shapes[i].shape.render(ctx, camera_pos);\n\t\t}\n\t},\n\n\t// repeal an object from this object.\n\t// here we iterate over sub-object and repeal only from the ones we collide with.\n\t// read base shape repel() doc for more info.\n\trepel: function(obj, force, iterations, factor_self, factor_other) {\n\t\t// do repel from independant shapes inside this composite shape\n\t\tvar ret = SSCD.Vector.ZERO.clone();\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tvar shape = this.__shapes[i].shape;\n\t\t\tif (shape.test_collide_with(obj)) {\n\t\t\t\tret.add_self(shape.repel(obj, force, iterations, 0, factor_other));\n\t\t\t}\n\t\t}\n\n\t\t// if have factor to move self, apply it\n\t\tif ((factor_self || 0) !== 0) {\n\t\t\tthis.move(ret.multiply_scalar(factor_self * -1));\n\t\t}\n\n\t\t// return factor\n\t\treturn ret;\n\t},\n\n\t// set colors to override the debug rendering colors.\n\t// read base shape set_debug_render_colors() doc for more info.\n\tset_debug_render_colors: function(fill_color, stroke_color) {\n\t\tthis.__override_fill_color = fill_color;\n\t\tthis.__override_stroke_color = stroke_color;\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tthis.__shapes[i].shape.set_debug_render_colors(fill_color, stroke_color);\n\t\t}\n\t},\n\n\t// get shapes list.\n\tget_shapes: function() {\n\t\t// if already got shapes list in cache return it\n\t\tif (this.__shapes_list_c) {\n\t\t\treturn this.__shapes_list_c;\n\t\t}\n\n\t\t// create shapes list\n\t\tvar ret = [];\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tret.push(this.__shapes[i].shape);\n\t\t}\n\n\t\t// add to cache and return\n\t\tthis.__shapes_list_c = ret;\n\t\treturn ret;\n\t},\n\n\t// return axis-aligned-bounding-box.\n\tbuild_aabb: function() {\n\t\t// if no shapes return zero aabb\n\t\tif (this.__shapes.length === 0) {\n\t\t\tthis.__aabb_pos_offset_c = SSCD.Vector.ZERO;\n\t\t\treturn new SSCD.AABB(SSCD.Vector.ZERO, SSCD.Vector.ZERO);\n\t\t}\n\n\t\t// return combined aabb\n\t\tvar ret = null;\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tvar curr_aabb = this.__shapes[i].shape.get_aabb();\n\t\t\tif (ret) {\n\t\t\t\tret.expand(curr_aabb);\n\t\t\t} else {\n\t\t\t\tret = curr_aabb;\n\t\t\t}\n\t\t}\n\n\t\t// store diff between position and bounding-box position, for faster aabb movement\n\t\tthis.__aabb_pos_offset_c = ret.position.sub(this.__position);\n\n\t\t// return bounding-box\n\t\treturn ret;\n\t},\n\n\t// called to update axis-aligned-bounding-box position.\n\t__update_aabb_pos: function() {\n\t\tthis.__aabb.position = this.__position.add(this.__aabb_pos_offset_c);\n\t},\n\n\t// add shape to the composite shape.\n\t// @param shape - the shape to add.\n\tadd: function(shape) {\n\t\t// make sure shape don't have a collision world\n\t\tif (shape.__world) {\n\t\t\tthrow new SSCD.IllegalActionError(\"Can't add shape with collision world to a composite shape!\");\n\t\t}\n\n\t\t// store shape offset\n\t\tvar offset = shape.__position;\n\n\t\t// reset shapes list cache\n\t\tthis.__shapes_list_c = undefined;\n\n\t\t// add shape to list of shapes and fix position\n\t\tthis.__shapes.push({\n\t\t\tshape: shape,\n\t\t\toffset: offset.clone()\n\t\t});\n\t\tshape.set_position(this.__position.add(offset));\n\n\t\t// reset bounding-box and notify collision world about the change\n\t\tthis.reset_aabb();\n\t\tthis.__update_parent_world();\n\n\t\t// set shape tags to be the composite shape tags\n\t\tshape.__collision_tags_val = this.__collision_tags_val;\n\t\tshape.__collision_tags = this.__collision_tags;\n\n\t\t// set shape debug colors\n\t\tshape.__override_fill_color = this.__override_fill_color;\n\t\tshape.__override_stroke_color = this.__override_stroke_color;\n\n\t\t// return the newly added shape\n\t\treturn shape;\n\t},\n\n\t// hook to call when update tags - update all child objects with new tags.\n\t__update_tags_hook: function() {\n\t\t// update all shapes about the new tags\n\t\tfor (var i = 0; i < this.__shapes; ++i) {\n\t\t\tvar shape = this.__shapes[i].shape;\n\t\t\tshape.__collision_tags_val = this.__collision_tags_val;\n\t\t\tshape.__collision_tags = this.__collision_tags;\n\t\t}\n\t},\n\n\t// remove a shape.\n\tremove: function(shape) {\n\t\tthis.__shapes_list_c = undefined;\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tif (this.__shapes[i].shape === shape) {\n\t\t\t\tthis.__shapes.splice(i, 1);\n\t\t\t\tthis.__update_parent_world();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthrow new SSCD.IllegalActionError(\"Shape to remove is not in composite shape!\");\n\t},\n\n\t// on position change - update all shapes.\n\t__update_position_hook: function() {\n\t\tfor (var i = 0; i < this.__shapes.length; ++i) {\n\t\t\tthis.__shapes[i].shape.set_position(this.__position.add(this.__shapes[i].offset));\n\t\t}\n\t}\n};\n\n// inherit from basic shape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.Shape.prototype, SSCD.CompositeShape.prototype);\n", "/*\n * A line collision shape\n * Author: Ronen Ness, 2015\n */\n \n// define the line shape\n// @param source - starting position (vector)\n// @param dest - destination point from source (vector)\n// output line will be from source to dest, and when you move it you will actually move the source position.\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.Line = function(source, dest) {\n\t// call init chain\n\tthis.init();\n\n\t// set dest position\n\tthis.__dest = dest;\n\n\t// set starting position\n\tthis.set_position(source);\n};\n\n// Line prototype\nSSCD.Line.prototype = {\n\n\t// set type and collision type\n\t__type: \"line\",\n\t__collision_type: \"line\",\n\n\t// render (for debug purposes)\n\t// @param ctx - 2d context of a canvas\n\t// @param camera_pos - optional camera position to transform the render position\n\trender: function(ctx, camera_pos) {\n\n\t\t// draw the line\n\t\tctx.beginPath();\n\t\tctx.moveTo(this.__position.x, this.__position.y);\n\t\tvar dest = this.__position.add(this.__dest);\n\t\tctx.lineTo(dest.x, dest.y);\n\n\t\t// draw stroke\n\t\tctx.lineWidth = \"7\";\n\t\tctx.strokeStyle = this.__get_render_stroke_color(0.75);\n\t\tctx.stroke();\n\n\t},\n\n\t// return axis-aligned-bounding-box\n\tbuild_aabb: function() {\n\t\tvar pos = new SSCD.Vector(0, 0);\n\t\tpos.x = this.__dest.x > 0 ? this.__position.x : this.__position.x + this.__dest.x;\n\t\tpos.y = this.__dest.y > 0 ? this.__position.y : this.__position.y + this.__dest.y;\n\t\tvar size = this.__dest.apply(Math.abs);\n\t\treturn new SSCD.AABB(pos, size);\n\t},\n\n\t// return absolute first point\n\tget_p1: function() {\n\t\tthis.__p1_c = this.__p1_c || this.__position.clone();\n\t\treturn this.__p1_c;\n\t},\n\n\t// return absolute second point\n\tget_p2: function() {\n\t\tthis.__p2_c = this.__p2_c || this.__position.add(this.__dest);\n\t\treturn this.__p2_c;\n\t},\n\n\t// on position change\n\t__update_position_hook: function() {\n\t\t// clear points cache\n\t\tthis.__p1_c = undefined;\n\t\tthis.__p2_c = undefined;\n\t},\n\n};\n\n// inherit from basic shape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.Shape.prototype, SSCD.Line.prototype);\n", "/*\n * A strip-of-lines collision shape\n * Author: Ronen Ness, 2015\n */\n \n// define the line shape\n// @param position - starting position (vector)\n// @param points - list of vectors that will make the lines.\n// @param closed - if true, will create a line between last and first points. default to false.\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.LineStrip = function(position, points, closed) {\n\t// call init chain\n\tthis.init();\n\n\t// set points\n\tthis.__points = points;\n\n\t// if not enough points assert\n\tif (points.length <= 1) {\n\t\tthrow new SSCD.IllegalActionError(\"Not enough vectors for LineStrip (got to have at least two vectors)\");\n\t}\n\n\t// close shape\n\tif (closed) {\n\t\tthis.__points.push(this.__points[0]);\n\t}\n\n\t// set starting position\n\tthis.set_position(position);\n};\n\n// line-strip prototype\nSSCD.LineStrip.prototype = {\n\n\t// set type and collision type\n\t__type: \"line-strip\",\n\t__collision_type: \"line-strip\",\n\n\t// render (for debug purposes)\n\t// @param ctx - 2d context of a canvas\n\t// @param camera_pos - optional camera position to transform the render position\n\trender: function(ctx, camera_pos) {\n\n\t\t// draw the lines\n\t\tvar to = undefined;\n\t\tctx.beginPath();\n\t\tfor (var i = 0; i < this.__points.length - 1; ++i) {\n\t\t\tvar from = this.__position.add(this.__points[i]);\n\t\t\tto = this.__position.add(this.__points[i + 1]);\n\t\t\tctx.moveTo(from.x, from.y);\n\t\t\tctx.lineTo(to.x, to.y);\n\t\t}\n\n\t\t// add last point\n\t\tctx.moveTo(to.x, to.y);\n\t\tto = this.__position.add(this.__points[this.__points.length - 1]);\n\t\tctx.lineTo(to.x, to.y);\n\n\t\t// draw stroke\n\t\tctx.lineWidth = \"7\";\n\t\tctx.strokeStyle = this.__get_render_stroke_color(0.75);\n\t\tctx.stroke();\n\n\t},\n\n\t// return line list with absolute positions\n\tget_abs_lines: function() {\n\t\t// if got lines in cache return it\n\t\tif (this.__abs_lines_c) {\n\t\t\treturn this.__abs_lines_c;\n\t\t}\n\n\t\t// create list of lines\n\t\tvar points = this.get_abs_points();\n\t\tvar ret = [];\n\t\tfor (var i = 0; i < points.length - 1; i++) {\n\t\t\tret.push([points[i], points[i + 1]]);\n\t\t}\n\n\t\t// add to cache and return\n\t\tthis.__abs_lines_c = ret;\n\t\treturn ret;\n\t},\n\n\t// return points with absolute position\n\tget_abs_points: function() {\n\t\t// if got points in cache return it\n\t\tif (this.__abs_points_c) {\n\t\t\treturn this.__abs_points_c;\n\t\t}\n\n\t\t// convert points\n\t\tvar ret = [];\n\t\tfor (var i = 0; i < this.__points.length; i++) {\n\t\t\tret.push(this.__points[i].add(this.__position));\n\t\t}\n\n\t\t// add to cache and return\n\t\tthis.__abs_points_c = ret;\n\t\treturn ret;\n\t},\n\n\t// on position change\n\t__update_position_hook: function() {\n\t\t// clear points and lines cache\n\t\tthis.__abs_points_c = undefined;\n\t\tthis.__abs_lines_c = undefined;\n\t},\n\n\t// called to update axis-aligned-bounding-box position\n\t__update_aabb_pos: function() {\n\t\tthis.__aabb.position.set(this.__aabb_offset_c.add(this.__position));\n\t},\n\n\t// return axis-aligned-bounding-box\n\tbuild_aabb: function() {\n\t\tvar ret = new SSCD.AABB(SSCD.Vector.ZERO, SSCD.Vector.ZERO);\n\t\tfor (var i = 0; i < this.__points.length; ++i) {\n\t\t\tret.add_vector(this.__points[i]);\n\t\t}\n\t\tthis.__aabb_offset_c = ret.position.clone();\n\t\tret.position.add_self(this.__position);\n\t\treturn ret;\n\t},\n\n};\n\n// inherit from basic shape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.Shape.prototype, SSCD.LineStrip.prototype);\n", "/*\n * rectangle collision shape\n * Author: Ronen Ness, 2015\n */\n \n// define the rectangle shape\n// @param position - starting position (vector)\n// @param size - rectangle size (vector)\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.Rectangle = function(position, size) {\n\t// call init chain\n\tthis.init();\n\n\t// set radius and size\n\tthis.__size = size;\n\n\t// set starting position\n\tthis.set_position(position);\n};\n\n// rectangle prototype\nSSCD.Rectangle.prototype = {\n\n\t// set type and collision type\n\t__type: \"rectangle\",\n\t__collision_type: \"rectangle\",\n\n\t// render (for debug purposes)\n\t// @param ctx - 2d context of a canvas\n\t// @param camera_pos - optional camera position to transform the render position\n\trender: function(ctx, camera_pos) {\n\t\t// apply camera on position\n\t\tvar position = this.__position.sub(camera_pos);\n\n\t\t// draw the rect\n\t\tctx.beginPath();\n\t\tctx.rect(position.x, position.y, this.__size.x, this.__size.y);\n\n\t\t// draw stroke\n\t\tctx.lineWidth = \"7\";\n\t\tctx.strokeStyle = this.__get_render_stroke_color(0.75);\n\t\tctx.stroke();\n\n\t\t// draw fill\n\t\tctx.fillStyle = this.__get_render_fill_color(0.35);\n\t\tctx.fill();\n\t},\n\n\t// return rectangle size\n\tget_size: function() {\n\t\treturn this.__size.clone();\n\t},\n\n\t// return axis-aligned-bounding-box\n\tbuild_aabb: function() {\n\t\treturn new SSCD.AABB(this.__position, this.__size);\n\t},\n\n\t// return absolute top-left corner\n\tget_top_left: function() {\n\t\tthis.__top_left_c = this.__top_left_c || this.__position.clone();\n\t\treturn this.__top_left_c;\n\t},\n\n\t// return absolute bottom-left corner\n\tget_bottom_left: function() {\n\t\tthis.__bottom_left_c = this.__bottom_left_c || this.__position.add(new SSCD.Vector(0, this.__size.y));\n\t\treturn this.__bottom_left_c;\n\t},\n\n\t// return absolute top-right corner\n\tget_top_right: function() {\n\t\tthis.__top_right_c = this.__top_right_c || this.__position.add(new SSCD.Vector(this.__size.x, 0));\n\t\treturn this.__top_right_c;\n\t},\n\n\t// return absolute bottom-right corner\n\tget_bottom_right: function() {\n\t\tthis.__bottom_right_c = this.__bottom_right_c || this.__position.add(new SSCD.Vector(this.__size.x, this.__size.y));\n\t\treturn this.__bottom_right_c;\n\t},\n\n\t// return absolute center\n\tget_abs_center: function() {\n\t\tthis.__abs_center_c = this.__abs_center_c || this.__position.add(this.__size.divide_scalar(2));\n\t\treturn this.__abs_center_c;\n\t},\n\n\t// on position change\n\t__update_position_hook: function() {\n\t\t// clear corner cache\n\t\tthis.__top_left_c = undefined;\n\t\tthis.__top_right_c = undefined;\n\t\tthis.__bottom_left_c = undefined;\n\t\tthis.__bottom_right_c = undefined;\n\t\tthis.__abs_center_c = undefined;\n\t},\n\n};\n\n// inherit from basic shape class.\n// this will fill the missing functions from parent, but will not replace functions existing in child.\nSSCD.extend(SSCD.Shape.prototype, SSCD.Rectangle.prototype);\n", "/*\n * define the base class of any collision shape.\n * every type of shape should inherit from this class.\n * Author: Ronen Ness, 2015\n */\n\n// base shape class\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.Shape = function() {};\n\n// base shape prototype\nSSCD.Shape.prototype = {\n\n\t// shape type (need to be overrided by children)\n\t__type: \"shape\",\n\n\t// define the collision type of this shape (how collision is tested against it)\n\t__collision_type: null,\n\n\t// to detect if this object is a collision shape\n\tis_shape: true,\n\n\t// optional data or object you can attach to shapes\n\t__data: null,\n\n\t// to give unique id to every shape for internal usage\n\t__next_id: 0,\n\n\t// default type flags: everything\n\t__collision_tags: [],\n\t__collision_tags_val: SSCD.World.prototype._ALL_TAGS_VAL,\n\n\t// init the general shape\n\t__init__: function() {\n\t\t// create position and set default type\n\t\tthis.__position = new SSCD.Vector();\n\n\t\t// for collision-world internal usage\n\t\tthis.__grid_chunks = []; // list with world chunks this shape is in\n\t\tthis.__world = null; // the parent collision world\n\t\tthis.__grid_bounderies = null; // grid bounderies\n\t\tthis.__last_insert_aabb = null; // will store the aabb at the last time this shape grid was last updated\n\n\t\t// set unique ids\n\t\tthis.__id = SSCD.Shape.prototype.__next_id++;\n\t},\n\n\t// return the shape unique id\n\tget_id: function() {\n\t\treturn this.__id;\n\t},\n\n\t// set the collision tags of this shape.\n\t// for example, if you want this shape to be tagged as \"wall\", use:\n\t//\t\tshape.set_collision_tags(\"walls\");\n\t//\n\t// you can also set multiple tags, like this:\n\t//\t\tshape.set_collision_tags([\"walls\", \"glass\"]);\n\t//\n\t// note: set tags to null to reset all collision tags\n\t//\n\t// @param tags - string or list of strings to set as collision tags for this shape.\n\t//\t\t\n\tset_collision_tags: function(tags) {\n\t\t// can't set tags without world instance\n\t\tif (this.__world === null) {\n\t\t\tthrow new SSCD.IllegalActionError(\"Can't set tags for a shape that is not inside a collision world!\");\n\t\t}\n\n\t\t// special case - if tags is null, reset tags\n\t\tif (tags === null) {\n\t\t\tthis.__collision_tags = [];\n\t\t\tthis.__collision_tags_val = SSCD.World.prototype._ALL_TAGS_VAL;\n\t\t}\n\t\t// else, set tags\n\t\telse {\n\t\t\t// set the collision tag hash value\n\t\t\tthis.__collision_tags_val = this.__world.__get_tags_value(tags);\n\n\t\t\t// convert tags to array and store them\n\t\t\tif (!(tags instanceof Array)) {\n\t\t\t\ttags = [tags];\n\t\t\t}\n\t\t\tthis.__collision_tags = tags;\n\t\t}\n\n\t\t// if there's a hook to call when setting tags, call it\n\t\tif (this.__update_tags_hook) {\n\t\t\tthis.__update_tags_hook();\n\t\t}\n\n\t\t// return self\n\t\treturn this;\n\t},\n\n\t// optional hook to call after updating collision tags\n\t__update_tags_hook: null,\n\n\t// return collision tag(s) (always return a list of strings)\n\tget_collision_tags: function(tags) {\n\t\treturn this.__collision_tags;\n\t},\n\n\t// check if collision tags match given tags list.\n\t// @param tags - tags to check. can either be the tags numeric value, a single string, or a list of strings.\n\t// note: if provided string or list of strings this shape must be inside a collision world.\n\tcollision_tags_match: function(tags) {\n\t\t// if need to convert tags to their numeric value\n\t\tif (isNaN(tags)) {\n\t\t\t// if don't have collision world raise error\n\t\t\tif (this.__world === null) {\n\t\t\t\tthrow new SSCD.IllegalActionError(\"If you provide tags as string(s) the shape must be inside a collision world to convert them!\");\n\t\t\t}\n\t\t\ttags = this.__world.__get_tags_value(tags);\n\t\t}\n\n\t\t// check if tags match\n\t\treturn (this.__collision_tags_val & tags) !== 0;\n\t},\n\n\t// check collision with other object\n\t// @param obj - any other shape or vector.\n\ttest_collide_with: function(obj) {\n\t\treturn SSCD.CollisionManager.test_collision(this, obj);\n\t},\n\n\t// repeal an object from this object.\n\t// this means, in simple words, we push the other object outside to prevent penetration.\n\t// this works in a very simply way - it iterates and push the penetrating object outside from center until its no longer collided.\n\t// @param obj: object or vector to repeal (must have move() function).\n\t// @param force: force factor, the bigger this is the stronger / faster the repealing will be. default to 1.\n\t// @param iterations: max iterations of repeal-and-test-again routines. default to 1.\n\t// @param factor_self: factor to multiply force that will apply on this shape. default to 0.\n\t// @param factor_other: factor to multiply force that will apply on this shape. default to 1.\n\t// NOTE: this function assume there's collision on start, meaning first iteration of repeal will ALWAYS happen.\n\t// @return: total movement due to repeling (vector).\n\trepel: function(obj, force, iterations, factor_self, factor_other) {\n\t\t// set defaults\n\t\tforce = force || 1;\n\t\titerations = iterations || 1;\n\t\tif (factor_self === undefined) factor_self = 0;\n\t\tif (factor_other === undefined) factor_other = 1;\n\n\t\t// get push vectors\n\t\tvar push_vector_other, push_vector_self;\n\t\tvar push_vector = this.get_repel_direction(obj).multiply_scalar_self(force);\n\t\tif (factor_other) push_vector_other = push_vector.multiply_scalar(factor_other);\n\t\tif (factor_self) push_vector_self = push_vector.multiply_scalar(factor_self * -1);\n\n\t\t// for return value\n\t\tvar ret = SSCD.Vector.ZERO.clone();\n\n\t\t// now do the repeling\n\t\tvar collide = true;\n\t\twhile (collide && iterations > 0) {\n\t\t\t// decreate iterations count\n\t\t\titerations--;\n\n\t\t\t// do pushing\n\t\t\tif (push_vector_other) obj.move(push_vector_other);\n\t\t\tif (push_vector_self) this.move(push_vector_self);\n\t\t\tret.add_self(push_vector);\n\n\t\t\t// check if still colliding\n\t\t\tcollide = this.test_collide_with(obj);\n\t\t}\n\n\t\t// return total pushed\n\t\treturn ret;\n\t},\n\n\t// get repel direction between this shape and another shape / vector.\n\tget_repel_direction: function(obj) {\n\t\t// get the center of this object\n\t\tvar center = this.get_abs_center();\n\n\t\t// get center of other object / vector\n\t\tvar other_center;\n\t\tif (obj instanceof SSCD.Vector) {\n\t\t\tother_center = obj;\n\t\t} else {\n\t\t\tother_center = obj.get_abs_center();\n\t\t}\n\n\t\t// return repel direction vector\n\t\treturn other_center.sub(center).normalize_self();\n\t},\n\n\t// return shape fill color for debug rendering.\n\t// @param opacity - if provided, will use this opacity in return color.\n\t__get_render_fill_color: function(opacity) {\n\t\t// if have override fill color use it:\n\t\tif (this.__override_fill_color) {\n\t\t\treturn this.__override_fill_color;\n\t\t}\n\n\t\t// else, return color based on tag\n\t\treturn this.__collision_tags_to_color(this.__collision_tags_val, opacity);\n\t},\n\n\t// return shape stroke color for debug rendering.\n\t// @param opacity - if provided, will use this opacity in return color.\n\t__get_render_stroke_color: function(opacity) {\n\t\t// if have override stroke color use it:\n\t\tif (this.__override_stroke_color) {\n\t\t\treturn this.__override_stroke_color;\n\t\t}\n\n\t\t// else, return color based on tag\n\t\treturn this.__collision_tags_to_color(this.__collision_tags_val, opacity);\n\t},\n\n\t// set colors to override the debug rendering colors.\n\t// note1: values accept any html5 color value (eg \"rgba(r,g,b,a)\" or \"white\").\n\t// note2: set nulls to use default colors (based on shape tags).\n\t// @param fill_color - shape fill color in debug render.\n\t// @param stroke_color - shape stroke color in debug render.\n\tset_debug_render_colors: function(fill_color, stroke_color) {\n\t\tthis.__override_fill_color = fill_color;\n\t\tthis.__override_stroke_color = stroke_color;\n\t},\n\n\t// default override colors is null - don't override debug colors.\n\t__override_fill_color: null,\n\t__override_stroke_color: null,\n\n\t// return color based on collision tags\n\t// @param tags - list with collision tags.\n\t// @param opacity - output color opacity.\n\t__collision_tags_to_color: function(tags, opacity) {\n\t\tvar r = Math.round(Math.abs(Math.sin(tags)) * 255);\n\t\tvar g = Math.round(Math.abs(Math.cos(tags)) * 255);\n\t\tvar b = Math.round(r ^ g);\n\t\treturn \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + opacity + \")\";\n\t},\n\n\t// attach data/object to this shape.\n\t// @param obj - anything you want to attach to this shape.\n\tset_data: function(obj) {\n\t\tthis.__data = obj;\n\t\treturn this;\n\t},\n\n\t// return the attached data / object of this shape.\n\tget_data: function() {\n\t\treturn this.__data;\n\t},\n\n\t// return shape type.\n\tget_name: function() {\n\t\treturn this.__type;\n\t},\n\n\t// render shape axis-aligned-bounding-box.\n\t// @param ctx - 2d context of a canvas.\n\t// @param camera_pos - optional camera position to transform the render position.\n\trender_aabb: function(ctx, camera_pos) {\n\t\tvar box = this.get_aabb();\n\n\t\t// draw the rect\n\t\tctx.beginPath();\n\t\tctx.rect(box.position.x - camera_pos.x, box.position.y - camera_pos.y, box.size.x, box.size.y);\n\n\t\t// draw stroke\n\t\tctx.lineWidth = \"1\";\n\t\tctx.strokeStyle = 'rgba(50, 175, 45, 0.5)';\n\t\tctx.stroke();\n\t},\n\n\t// set the current position of this shape.\n\t// @param vector - new position.\n\tset_position: function(vector) {\n\t\tthis.__position.x = vector.x;\n\t\tthis.__position.y = vector.y;\n\t\tthis.__update_position();\n\t\treturn this;\n\t},\n\n\t// get position (return vector).\n\tget_position: function() {\n\t\treturn this.__position.clone();\n\t},\n\n\t// move the shape from its current position.\n\t// @param vector - vector to move the shape.\n\tmove: function(vector) {\n\t\tthis.set_position(this.__position.add(vector));\n\t\treturn this;\n\t},\n\n\t// should be called whenever position changes.\n\t__update_position: function() {\n\t\t// call position-change hook\n\t\tif (this.__update_position_hook) {\n\t\t\tthis.__update_position_hook();\n\t\t}\n\n\t\t// remove bounding box cache\n\t\tif (this.__aabb) {\n\t\t\tthis.__update_aabb_pos();\n\t\t}\n\n\t\t// update in world\n\t\tthis.__update_parent_world();\n\t},\n\n\t// called to update axis-aligned-bounding-box position.\n\t// this function called AFTER the position update, meaning new position applied.\n\t// this function only called if have aabb in cache.\n\t__update_aabb_pos: function() {\n\t\tthis.__aabb.position = this.__position;\n\t},\n\n\t// return the absolute center of the shape.\n\tget_abs_center: function() {\n\t\tvar aabb = this.get_aabb();\n\t\treturn aabb.position.add(aabb.size.multiply_scalar(0.5));\n\t},\n\n\t// reset bounding box.\n\treset_aabb: function() {\n\t\tthis.__aabb = undefined;\n\t},\n\n\t// update this shape in parent world (call this when shape change position or change and need to notify world).\n\t__update_parent_world: function() {\n\t\tif (this.__world) {\n\t\t\tthis.__world.__update_shape_grid(this);\n\t\t}\n\t},\n\n\t// optional hook you can override that will be called whenever shape position changes.\n\t__update_position_hook: null,\n\n\t// render (for debug purposes).\n\t// @param ctx - 2d context of a canvas.\n\t// @param camera_pos - optional camera position to transform the render position.\n\trender: function(ctx, camera_pos) {\n\t\tthrow new SSCD.NotImplementedError();\n\t},\n\n\t// build the shape's axis-aligned bounding box.\n\tbuild_aabb: function() {\n\t\tthrow new SSCD.NotImplementedError();\n\t},\n\n\t// return the axis-aligned-bounding-box of this shape.\n\tget_aabb: function() {\n\t\tthis.__aabb = this.__aabb || this.build_aabb();\n\t\treturn this.__aabb;\n\t},\n\n};\n", "/*\n * here we define all the collision-detection functions for all possible shape combinations\n * Author: Ronen Ness, 2015\n */\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.CollisionManager = {\n\n\t// test collision between two objects, a and b.\n\t// @param a, b - instances to check collision. can be any shape or vector.\n\ttest_collision: function(a, b) {\n\t\t// vector-vector collision\n\t\tif (a instanceof SSCD.Vector && b instanceof SSCD.Vector) {\n\t\t\treturn this._test_collision_vector_vector(a, b);\n\t\t}\n\n\t\t// composite shape collision\n\t\tif (a.__collision_type == \"composite-shape\") {\n\t\t\treturn this._test_collision_composite_shape(a, b);\n\t\t}\n\t\tif (b.__collision_type == \"composite-shape\") {\n\t\t\treturn this._test_collision_composite_shape(b, a);\n\t\t}\n\n\t\t// circle-vector collision\n\t\tif (a instanceof SSCD.Vector && b.__collision_type == \"circle\") {\n\t\t\treturn this._test_collision_circle_vector(b, a);\n\t\t}\n\t\tif (a.__collision_type == \"circle\" && b instanceof SSCD.Vector) {\n\t\t\treturn this._test_collision_circle_vector(a, b);\n\t\t}\n\n\t\t// circle-circle collision\n\t\tif (a.__collision_type == \"circle\" && b.__collision_type == \"circle\") {\n\t\t\treturn this._test_collision_circle_circle(b, a);\n\t\t}\n\n\t\t// circle-rectangle collision\n\t\tif (a.__collision_type == \"circle\" && b.__collision_type == \"rectangle\") {\n\t\t\treturn this._test_collision_circle_rect(a, b);\n\t\t}\n\t\tif (a.__collision_type == \"rectangle\" && b.__collision_type == \"circle\") {\n\t\t\treturn this._test_collision_circle_rect(b, a);\n\t\t}\n\n\t\t// circle-line collision\n\t\tif (a.__collision_type == \"circle\" && b.__collision_type == \"line\") {\n\t\t\treturn this._test_collision_circle_line(a, b);\n\t\t}\n\t\tif (a.__collision_type == \"line\" && b.__collision_type == \"circle\") {\n\t\t\treturn this._test_collision_circle_line(b, a);\n\t\t}\n\n\t\t// linestrip-line collision\n\t\tif (a.__collision_type == \"line-strip\" && b.__collision_type == \"line\") {\n\t\t\treturn this._test_collision_linestrip_line(a, b);\n\t\t}\n\t\tif (a.__collision_type == \"line\" && b.__collision_type == \"line-strip\") {\n\t\t\treturn this._test_collision_linestrip_line(b, a);\n\t\t}\n\n\t\t// circle-linestrip collision\n\t\tif (a.__collision_type == \"circle\" && b.__collision_type == \"line-strip\") {\n\t\t\treturn this._test_collision_circle_linestrip(a, b);\n\t\t}\n\t\tif (a.__collision_type == \"line-strip\" && b.__collision_type == \"circle\") {\n\t\t\treturn this._test_collision_circle_linestrip(b, a);\n\t\t}\n\n\t\t// rect-vector collision\n\t\tif (a instanceof SSCD.Vector && b.__collision_type == \"rectangle\") {\n\t\t\treturn this._test_collision_rect_vector(b, a);\n\t\t}\n\t\tif (a.__collision_type == \"rectangle\" && b instanceof SSCD.Vector) {\n\t\t\treturn this._test_collision_rect_vector(a, b);\n\t\t}\n\n\t\t// rect-rect collision\n\t\tif (a.__collision_type == \"rectangle\" && b.__collision_type == \"rectangle\") {\n\t\t\treturn this._test_collision_rect_rect(b, a);\n\t\t}\n\n\t\t// line-strip with line-strip collision\n\t\tif (a.__collision_type == \"line-strip\" && b.__collision_type == \"line-strip\") {\n\t\t\treturn this._test_collision_linestrip_linestrip(a, b);\n\t\t}\n\n\t\t// rect-line collision\n\t\tif (a.__collision_type == \"line\" && b.__collision_type == \"rectangle\") {\n\t\t\treturn this._test_collision_rect_line(b, a);\n\t\t}\n\t\tif (a.__collision_type == \"rectangle\" && b.__collision_type == \"line\") {\n\t\t\treturn this._test_collision_rect_line(a, b);\n\t\t}\n\n\t\t// rect-linestrip collision\n\t\tif (a.__collision_type == \"line-strip\" && b.__collision_type == \"rectangle\") {\n\t\t\treturn this._test_collision_rect_linestrip(b, a);\n\t\t}\n\t\tif (a.__collision_type == \"rectangle\" && b.__collision_type == \"line-strip\") {\n\t\t\treturn this._test_collision_rect_linestrip(a, b);\n\t\t}\n\n\t\t// line-line collision\n\t\tif (a.__collision_type == \"line\" && b.__collision_type == \"line\") {\n\t\t\treturn this._test_collision_line_line(a, b);\n\t\t}\n\n\t\t// vector-line collision\n\t\tif (a.__collision_type == \"line\" && b instanceof SSCD.Vector) {\n\t\t\treturn this._test_collision_vector_line(b, a);\n\t\t}\n\t\tif (a instanceof SSCD.Vector && b.__collision_type == \"line\") {\n\t\t\treturn this._test_collision_vector_line(a, b);\n\t\t}\n\n\t\t// vector-linestrip collision\n\t\tif (a.__collision_type == \"line-strip\" && b instanceof SSCD.Vector) {\n\t\t\treturn this._test_collision_vector_linestrip(b, a);\n\t\t}\n\t\tif (a instanceof SSCD.Vector && b.__collision_type == \"line-strip\") {\n\t\t\treturn this._test_collision_vector_linestrip(a, b);\n\t\t}\n\n\t\t// unsupported shapes!\n\t\tthrow new SSCD.UnsupportedShapes(a, b);\n\t},\n\n\t// test collision between two vectors\n\t_test_collision_vector_vector: function(a, b) {\n\t\treturn (a.x === b.x) && (a.y === b.y);\n\t},\n\n\t// test collision between circle and vector\n\t_test_collision_circle_vector: function(circle, vector) {\n\t\treturn SSCD.Math.distance(circle.__position, vector) <= circle.__radius;\n\t},\n\n\t// test collision between circle and another circle\n\t_test_collision_circle_circle: function(a, b) {\n\t\treturn SSCD.Math.distance(a.__position, b.__position) <= a.__radius + b.__radius;\n\t},\n\n\t// test collision between rectangle and vector\n\t_test_collision_rect_vector: function(rect, vector) {\n\t\treturn (vector.x >= rect.__position.x) && (vector.y >= rect.__position.y) &&\n\t\t\t(vector.x <= rect.__position.x + rect.__size.x) &&\n\t\t\t(vector.y <= rect.__position.y + rect.__size.y);\n\t},\n\n\t// test collision vector with line\n\t_test_collision_vector_line: function(v, line) {\n\t\treturn SSCD.Math.is_on_line(v, line.get_p1(), line.get_p2());\n\t},\n\n\t// test collision vector with linestrip\n\t_test_collision_vector_linestrip: function(v, linestrip) {\n\t\tvar lines = linestrip.get_abs_lines();\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tif (SSCD.Math.is_on_line(v, lines[i][0], lines[i][1])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t// test collision between circle and line\n\t_test_collision_circle_line: function(circle, line) {\n\t\treturn SSCD.Math.distance_to_line(circle.__position, line.get_p1(), line.get_p2()) <= circle.__radius;\n\t},\n\n\t// test collision between circle and line-strip\n\t_test_collision_circle_linestrip: function(circle, linestrip) {\n\t\tvar lines = linestrip.get_abs_lines();\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tif (SSCD.Math.distance_to_line(circle.__position, lines[i][0], lines[i][1]) <= circle.__radius) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t// test collision between linestrip and a single line\n\t_test_collision_linestrip_line: function(linestrip, line) {\n\t\tvar lines = linestrip.get_abs_lines();\n\t\tvar p1 = line.get_p1(),\n\t\t\tp2 = line.get_p2();\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tif (SSCD.Math.line_intersects(p1, p2, lines[i][0], lines[i][1])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t// check collision line with line\n\t_test_collision_line_line: function(a, b) {\n\t\treturn SSCD.Math.line_intersects(a.get_p1(), a.get_p2(),\n\t\t\tb.get_p1(), b.get_p2());\n\t},\n\n\t// check collision between rectangle and line\n\t_test_collision_rect_line: function(rect, line) {\n\t\t// get the line's two points\n\t\tvar p1 = line.get_p1();\n\t\tvar p2 = line.get_p2();\n\n\t\t// first check if one of the line points is contained inside the rectangle\n\t\tif (SSCD.CollisionManager._test_collision_rect_vector(rect, p1) ||\n\t\t\tSSCD.CollisionManager._test_collision_rect_vector(rect, p2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// now check collision between line and rect lines\n\n\t\t// left side\n\t\tvar r1 = rect.get_top_left();\n\t\tvar r2 = rect.get_bottom_left();\n\t\tif (SSCD.Math.line_intersects(p1, p2, r1, r2)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// right side\n\t\tvar r3 = rect.get_top_right();\n\t\tvar r4 = rect.get_bottom_right();\n\t\tif (SSCD.Math.line_intersects(p1, p2, r3, r4)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// top side\n\t\tif (SSCD.Math.line_intersects(p1, p2, r1, r3)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// bottom side\n\t\tif (SSCD.Math.line_intersects(p1, p2, r2, r4)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// no collision\n\t\treturn false;\n\t},\n\n\t// test collision between rectagnle and linesstrip\n\t_test_collision_rect_linestrip: function(rect, linesstrip) {\n\t\t// first check all points\n\t\tvar points = linesstrip.get_abs_points();\n\t\tfor (var i = 0; i < points.length; ++i) {\n\t\t\tif (this._test_collision_rect_vector(rect, points[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// now check intersection with rectangle sides\n\n\t\tvar r1 = rect.get_top_left();\n\t\tvar r2 = rect.get_bottom_left();\n\t\tvar r3 = rect.get_top_right();\n\t\tvar r4 = rect.get_bottom_right();\n\n\t\tvar lines = linesstrip.get_abs_lines();\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tvar p1 = lines[i][0];\n\t\t\tvar p2 = lines[i][1];\n\n\t\t\t// left side\n\t\t\tif (SSCD.Math.line_intersects(p1, p2, r1, r2)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// right side\n\t\t\tif (SSCD.Math.line_intersects(p1, p2, r3, r4)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// top side\n\t\t\tif (SSCD.Math.line_intersects(p1, p2, r1, r3)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// bottom side\n\t\t\tif (SSCD.Math.line_intersects(p1, p2, r2, r4)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// no collision\n\t\treturn false;\n\t},\n\n\t// test collision between two linestrips\n\t_test_collision_linestrip_linestrip: function(strip1, strip2) {\n\t\tvar lines1 = strip1.get_abs_lines();\n\t\tvar lines2 = strip2.get_abs_lines();\n\t\tfor (var i = 0; i < lines1.length; ++i) {\n\t\t\tfor (var j = 0; j < lines2.length; ++j) {\n\t\t\t\tif (SSCD.Math.line_intersects(lines1[i][0], lines1[i][1],\n\t\t\t\t\t\tlines2[j][0], lines2[j][1])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\t// test composite shape with any other shape\n\t_test_collision_composite_shape: function(composite, other) {\n\t\t// get all shapes in composite shape\n\t\tvar comp_shapes = composite.get_shapes();\n\n\t\t// special case: other shape is a composite shape as well\n\t\tif (other.__collision_type == \"composite-shape\") {\n\t\t\tvar other_shapes = other.get_shapes();\n\t\t\tfor (var i = 0; i < comp_shapes.length; ++i) {\n\t\t\t\tfor (var j = 0; j < other_shapes.length; ++j) {\n\t\t\t\t\tif (SSCD.CollisionManager.test_collision(comp_shapes[i], other_shapes[j])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// normal case - other shape is a normal shape\n\t\telse {\n\t\t\tfor (var i = 0; i < comp_shapes.length; ++i) {\n\t\t\t\tif (SSCD.CollisionManager.test_collision(comp_shapes[i], other)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// no collision found\n\t\treturn false;\n\n\t},\n\n\t// test collision between circle and rectangle\n\t_test_collision_circle_rect: function(circle, rect) {\n\t\t// get circle center\n\t\tvar circle_pos = circle.__position;\n\n\t\t// first check if circle center is inside the rectangle - easy case\n\t\tvar collide = SSCD.CollisionManager._test_collision_rect_vector(rect, circle_pos);\n\t\tif (collide) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// get rectangle center\n\t\tvar rect_center = rect.get_abs_center();\n\n\t\t// now check other simple case - collision between rect center and circle\n\t\tvar collide = SSCD.CollisionManager._test_collision_circle_vector(circle, rect_center);\n\t\tif (collide) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// create a list of lines to check (in the rectangle) based on circle position to rect center\n\t\tvar lines = [];\n\t\tif (rect_center.x > circle_pos.x) {\n\t\t\tlines.push([rect.get_top_left(), rect.get_bottom_left()]);\n\t\t} else {\n\t\t\tlines.push([rect.get_top_right(), rect.get_bottom_right()]);\n\t\t}\n\t\tif (rect_center.y > circle_pos.y) {\n\t\t\tlines.push([rect.get_top_left(), rect.get_top_right()]);\n\t\t} else {\n\t\t\tlines.push([rect.get_bottom_left(), rect.get_bottom_right()]);\n\t\t}\n\n\t\t// now check intersection between circle and each of the rectangle lines\n\t\tfor (var i = 0; i < lines.length; ++i) {\n\t\t\tvar dist_to_line = SSCD.Math.distance_to_line(circle_pos, lines[i][0], lines[i][1]);\n\t\t\tif (dist_to_line <= circle.__radius) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// no collision..\n\t\treturn false;\n\t},\n\n\t// test collision between circle and rectangle\n\t_test_collision_rect_rect: function(a, b) {\n\t\tvar r1 = {\n\t\t\tleft: a.__position.x,\n\t\t\tright: a.__position.x + a.__size.x,\n\t\t\ttop: a.__position.y,\n\t\t\tbottom: a.__position.y + a.__size.y\n\t\t};\n\t\tvar r2 = {\n\t\t\tleft: b.__position.x,\n\t\t\tright: b.__position.x + b.__size.x,\n\t\t\ttop: b.__position.y,\n\t\t\tbottom: b.__position.y + b.__size.y\n\t\t};\n\t\treturn !(r2.left > r1.right ||\n\t\t\tr2.right < r1.left ||\n\t\t\tr2.top > r1.bottom ||\n\t\t\tr2.bottom < r1.top);\n\t},\n};\n\n// exception when trying to check collision on shapes not supported\nSSCD.UnsupportedShapes = function(a, b) {\n\tthis.name = \"Unsupported Shapes\";\n\tthis.message = \"Unsupported shapes collision test! '\" + a.get_name() + \"' <-> '\" + b.get_name() + \"'.\";\n};\nSSCD.UnsupportedShapes.prototype = Error.prototype;\n", "/*\n * Define axis-aligned-bounding-box class.\n * Author: Ronen Ness, 2015\n */\n\n// Axis-aligned-bounding-box class\n// position: top-left corner (vector)\n// size: width and height (vector)\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.AABB = function(position, size) {\n\tthis.position = position.clone();\n\tthis.size = size.clone();\n};\n\n// some aabb methods\nSSCD.AABB.prototype = {\n\n\t// expand this bounding-box by other bounding box\n\texpand: function(other) {\n\t\t// get new bounds\n\t\tvar min_x = Math.min(this.position.x, other.position.x);\n\t\tvar min_y = Math.min(this.position.y, other.position.y);\n\t\tvar max_x = Math.max(this.position.x + this.size.x, other.position.x + other.size.x);\n\t\tvar max_y = Math.max(this.position.y + this.size.y, other.position.y + other.size.y);\n\n\t\t// set them\n\t\tthis.position.x = min_x;\n\t\tthis.position.y = min_y;\n\t\tthis.size.x = max_x - min_x;\n\t\tthis.size.y = max_y - min_y;\n\t},\n\n\t// expand this bounding-box with vector\n\tadd_vector: function(vector) {\n\t\t// update position x\n\t\tvar push_pos_x = this.position.x - vector.x;\n\t\tif (push_pos_x > 0) {\n\t\t\tthis.position.x -= push_pos_x;\n\t\t\tthis.size.x += push_pos_x;\n\t\t}\n\n\t\t// update position y\n\t\tvar push_pos_y = this.position.y - vector.y;\n\t\tif (push_pos_y > 0) {\n\t\t\tthis.position.y -= push_pos_y;\n\t\t\tthis.size.y += push_pos_y;\n\t\t}\n\n\t\t// update size x\n\t\tvar push_size_x = vector.x - (this.position.x + this.size.x);\n\t\tif (push_size_x > 0) {\n\t\t\tthis.size.x += push_size_x;\n\t\t}\n\n\t\t// update size y\n\t\tvar push_size_y = vector.y - (this.position.y + this.size.y);\n\t\tif (push_size_y > 0) {\n\t\t\tthis.size.y += push_size_y;\n\t\t}\n\t},\n\n\t// clone this aabb\n\tclone: function() {\n\t\treturn new SSCD.AABB(this.position, this.size);\n\t}\n\n};\n", "/*\n * Provide simple inheritance (extend prototype)\n * Author: Ronen Ness, 2015\n */\n\n// inherit base into child\n// base / child must be object's prototype (eg SSCD.something.prototype)\n// NOTE: don't use javascript built-ins so you won't mess up their prototypes.\nimport {SSCD} from \"../sscdNameSpace.js\"\n\nSSCD.extend = function(base, child) {\n\n\t// copy all properties\n\tfor (var prop in base) {\n\t\tif (child[prop])\n\t\t\tcontinue;\n\n\t\tchild[prop] = base[prop];\n\t}\n\n\t// create inits list (constructors)\n\t// this creates a function namd .init() that will call all the __init__() functions in the inheritance chain by the order it was extended.\n\tchild.__inits = child.__inits || [];\n\n\t// add parent init function\n\tif (base.__init__) {\n\t\tchild.__inits.push(base.__init__);\n\t}\n\n\t// set init function\n\tchild.init = function() {\n\t\tfor (var i = 0; i < this.__inits.length; ++i) {\n\t\t\tthis.__curr_init_func = this.__inits[i];\n\t\t\tthis.__curr_init_func();\n\t\t}\n\t\tdelete this.__curr_init_func;\n\t};\n};\n\n// for not-implemented exceptions\nSSCD.NotImplementedError = function(message) {\n\tthis.name = \"NotImplementedError\";\n\tthis.message = (message || \"\");\n};\nSSCD.NotImplementedError.prototype = Error.prototype;\n", "/*\n * Some useful Math functions.\n * Author: Ronen Ness, 2015\n */\nimport {SSCD} from \"../sscdNameSpace.js\"\n\n// set namespace\nSSCD.Math = {};\n\n// Converts from degrees to radians.\nSSCD.Math.to_radians = function(degrees) {\n\treturn degrees * Math.PI / 180;\n};\n\n// Converts from radians to degrees.\nSSCD.Math.to_degrees = function(radians) {\n\treturn radians * 180 / Math.PI;\n};\n\n// get distance between vectors\nSSCD.Math.distance = function(p1, p2) {\n\tvar dx = p2.x - p1.x,\n\t\tdy = p2.y - p1.y;\n\treturn Math.sqrt(dx * dx + dy * dy);\n};\n\n// get distance without sqrt\nSSCD.Math.dist2 = function(p1, p2) {\n\tvar dx = p2.x - p1.x,\n\t\tdy = p2.y - p1.y;\n\treturn (dx * dx + dy * dy);\n};\n\n// angle between two vectors\nSSCD.Math.angle = function(P1, P2) {\n\tvar deltaY = P2.y - P1.y,\n\t\tdeltaX = P2.x - P1.x;\n\n\treturn Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n};\n\n// distance from point to line\n// p is point to check\n// v and w are the two edges of the line segment\nSSCD.Math.distance_to_line = function(p, v, w) {\n\n\tvar l2 = SSCD.Math.dist2(v, w);\n\tvar t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\n\tif (t < 0) {\n\t\treturn SSCD.Math.distance(p, v);\n\t}\n\tif (t > 1) {\n\t\treturn SSCD.Math.distance(p, w);\n\t}\n\treturn SSCD.Math.distance(p, {\n\t\tx: v.x + t * (w.x - v.x),\n\t\ty: v.y + t * (w.y - v.y)\n\t});\n};\n\n// Adapted from: http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect/1968345#1968345\n// check if two lines intersect\nSSCD.Math.line_intersects = function(p0, p1, p2, p3) {\n\n\tvar s1_x, s1_y, s2_x, s2_y;\n\ts1_x = p1.x - p0.x;\n\ts1_y = p1.y - p0.y;\n\ts2_x = p3.x - p2.x;\n\ts2_y = p3.y - p2.y;\n\n\tvar s, t;\n\ts = (-s1_y * (p0.x - p2.x) + s1_x * (p0.y - p2.y)) / (-s2_x * s1_y + s1_x * s2_y);\n\tt = (s2_x * (p0.y - p2.y) - s2_y * (p0.x - p2.x)) / (-s2_x * s1_y + s1_x * s2_y);\n\n\tif (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n\t\t// Collision detected\n\t\treturn 1;\n\t}\n\n\treturn 0; // No collision\n};\n\n// return if point is on given line\nSSCD.Math.is_on_line = function(v, l1, l2) {\n\treturn SSCD.Math.distance_to_line(v, l1, l2) <= 5;\n};\n\n\n// return shortest, positive distance between two given angles.\n// for example:\n//  50, 100 will return 50\n//  350, 10 will return 20\n// angles shoule be in 0-360 values (but negatives and >360 allowed as well)\nSSCD.Math.angles_dis = function(a0, a1) {\n\n\t// convert to radians\n\ta0 = SSCD.Math.to_radians(a0);\n\ta1 = SSCD.Math.to_radians(a1);\n\n\t// get distance\n\tvar max = Math.PI * 2;\n\tvar da = (a1 - a0) % max;\n\tvar distance = 2 * da % max - da;\n\n\t// convert back to degrees\n\tdistance = SSCD.Math.to_degrees(distance);\n\n\t// return abs value\n\treturn Math.abs(distance);\n};\n", "/*\n * This file define the 2d vector class & utils.\n * Author: Ronen Ness, 2015\n */\nimport {SSCD} from \"../sscdNameSpace.js\"\n\n// a 2d vector\nSSCD.Vector = function(x, y) {\n\tthis.x = x;\n\tthis.y = y;\n};\n\n\n// set vector functions\nSSCD.Vector.prototype = {\n\n\t// for debug and prints\n\tget_name: function() {\n\t\treturn \"vector\";\n\t},\n\n\t// clone vector\n\tclone: function() {\n\t\treturn new SSCD.Vector(this.x, this.y);\n\t},\n\n\t// set value from another vector\n\tset: function(vector) {\n\t\tthis.x = vector.x;\n\t\tthis.y = vector.y;\n\t},\n\n\t// flip between x and y (return without changing self)\n\tflip: function() {\n\t\treturn new SSCD.Vector(this.y, this.x);\n\t},\n\n\t// flip between x and y (change self values)\n\tflip_self: function() {\n\t\tthis.y = [this.x, this.x = this.y][0];\n\t\treturn this;\n\t},\n\n\t// make negative (return without changing self)\n\tnegative: function() {\n\t\treturn this.multiply_scalar(-1);\n\t},\n\n\t// make negative self (multiply by -1)\n\tnegative_self: function() {\n\t\tthis.multiply_scalar_self(-1);\n\t\treturn this;\n\t},\n\n\t// get distance from another vector\n\tdistance_from: function(other) {\n\t\treturn SSCD.Math.distance(this, other);\n\t},\n\n\t// get angle from another vector\n\tangle_from: function(other) {\n\t\treturn SSCD.Math.angle(this, other);\n\t},\n\n\t// move the position of this vector (same as add_self)\n\tmove: function(vector) {\n\t\tthis.x += vector.x;\n\t\tthis.y += vector.y;\n\t\treturn this;\n\t},\n\n\t// normalize this vector\n\tnormalize_self: function() {\n\t\tvar by = Math.sqrt(this.x * this.x + this.y * this.y);\n\t\tif (by === 0) return this;\n\t\tthis.x /= by;\n\t\tthis.y /= by;\n\t\treturn this;\n\t},\n\n\t// return normalized copy (don't change self)\n\tnormalize: function() {\n\t\treturn this.clone().normalize_self();\n\t},\n\n\t// add vector to self\n\tadd_self: function(other) {\n\t\tthis.x += other.x;\n\t\tthis.y += other.y;\n\t\treturn this;\n\t},\n\n\t// sub vector from self\n\tsub_self: function(other) {\n\t\tthis.x -= other.x;\n\t\tthis.y -= other.y;\n\t\treturn this;\n\t},\n\n\t// divide vector from self\n\tdivide_self: function(other) {\n\t\tthis.x /= other.x;\n\t\tthis.y /= other.y;\n\t\treturn this;\n\t},\n\n\t// multiple this vector with another\n\tmultiply_self: function(other) {\n\t\tthis.x *= other.x;\n\t\tthis.y *= other.y;\n\t\treturn this;\n\t},\n\n\t// add scalar to self\n\tadd_scalar_self: function(val) {\n\t\tthis.x += val;\n\t\tthis.y += val;\n\t\treturn this;\n\t},\n\n\t// substract scalar from self\n\tsub_scalar_self: function(val) {\n\t\tthis.x -= val;\n\t\tthis.y -= val;\n\t\treturn this;\n\t},\n\n\t// divide scalar from self\n\tdivide_scalar_self: function(val) {\n\t\tthis.x /= val;\n\t\tthis.y /= val;\n\t\treturn this;\n\t},\n\n\t// multiply scalar from self\n\tmultiply_scalar_self: function(val) {\n\t\tthis.x *= val;\n\t\tthis.y *= val;\n\t\treturn this;\n\t},\n\n\t// add to vector without changing self\n\tadd: function(other) {\n\t\treturn this.clone().add_self(other);\n\t},\n\n\t// sub from vector without changing self\n\tsub: function(other) {\n\t\treturn this.clone().sub_self(other);\n\t},\n\n\t// multiply vector without changing self\n\tmultiply: function(other) {\n\t\treturn this.clone().multiply_self(other);\n\t},\n\n\t// divide vector without changing self\n\tdivide: function(other) {\n\t\treturn this.clone().divide_self(other);\n\t},\n\n\t// add scalar without changing self\n\tadd_scalar: function(val) {\n\t\treturn this.clone().add_scalar_self(val);\n\t},\n\n\t// substract scalar without changing self\n\tsub_scalar: function(val) {\n\t\treturn this.clone().sub_scalar_self(val);\n\t},\n\n\t// multiply scalar without changing self\n\tmultiply_scalar: function(val) {\n\t\treturn this.clone().multiply_scalar_self(val);\n\t},\n\n\t// divide scalar without changing self\n\tdivide_scalar: function(val) {\n\t\treturn this.clone().divide_scalar_self(val);\n\t},\n\n\t// clamp vector values\n\tclamp: function(min, max) {\n\t\tif (this.x < min) this.x = min;\n\t\tif (this.y < min) this.y = min;\n\t\tif (this.x > max) this.x = max;\n\t\tif (this.y > max) this.y = max;\n\t\treturn this;\n\t},\n\n\t// create vector from radian\n\tfrom_radian: function(rad) {\n\t\tthis.x = Math.cos(rad);\n\t\tthis.y = Math.sin(rad);\n\t\treturn this;\n\t},\n\n\t// create vector from radian\n\tfrom_angle: function(angle) {\n\t\treturn this.from_radian(SSCD.Math.to_radians(angle));\n\t},\n\t\n\t// apply a function on x and y components on self\n\tapply_self: function(func) {\n\t\tthis.x = func(this.x);\n\t\tthis.y = func(this.y);\n\t\treturn this;\n\t},\n\n\t// apply a function on x and y components\n\tapply: function(func) {\n\t\treturn this.clone().apply_self(func);\n\t},\n\n\t// print debug\n\tdebug: function() {\n\t\tconsole.debug(this.x + \", \" + this.y);\n\t}\n};\n\nSSCD.Vector.ZERO = new SSCD.Vector(0, 0);\nSSCD.Vector.ONE = new SSCD.Vector(1, 1);\nSSCD.Vector.UP = new SSCD.Vector(0, -1);\nSSCD.Vector.DOWN = new SSCD.Vector(0, 1);\nSSCD.Vector.LEFT = new SSCD.Vector(-1, 0);\nSSCD.Vector.RIGHT = new SSCD.Vector(1, 0);\nSSCD.Vector.UP_LEFT = new SSCD.Vector(-1, -1);\nSSCD.Vector.DOWN_LEFT = new SSCD.Vector(-1, 1);\nSSCD.Vector.UP_RIGHT = new SSCD.Vector(1, -1);\nSSCD.Vector.DOWN_RIGHT = new SSCD.Vector(1, 1);\n", "/*\n * Physical world contains a grid of shapes you can efficiently check collision with\n * Author: Ronen Ness, 2015\n */\n \n// a collision world. you create an instance of this class and add bodies to it to check collision.\n//\n// params is an optional dictionary with the following optional settings:\n//\t\t\tgrid_size: \t\tfor better performance, the world is divided into a grid of world-chunks and when collision is checked we will\n//\t\t\t\t\t\t\t\tonly match objects from the same chunk(s) on grid. this param defines the grid size. default to 512.\n//\t\t\tgrid_error: \tmax amount of pixels a shape can move before updating the collision grid. default to 2.\n//\t\t\t\t\t\t\t\tyou can increase this number to make moving objects more efficient for the price of sometimes\n//\t\t\t\t\t\t\t\tless accurate collision around the edges. set to 0 if you want to always update grid (useful if all your moving objects move fast)\nimport {SSCD} from \"./sscdNameSpace.js\"\nSSCD.World = function(params) {\n\n\tthis.__init_world(params);\n\n};\n\n// collision world prototype\nSSCD.World.prototype = {\n\n\t// init the world\n\t__init_world: function(params) {\n\t\t// set defaults\n\t\tparams = params || {};\n\t\tparams.grid_size = params.grid_size || 512;\n\t\tparams.grid_error = params.grid_error !== undefined ? params.grid_error : 2;\n\n\t\t// create grid and set params\n\t\tthis.__grid = {};\n\t\tthis.__params = params;\n\n\t\t// all the shapes currently in this world\n\t\tthis.__all_shapes = {};\n\n\t\t// create the empty collision flags dictionary\n\t\tthis.__collision_tags = {};\n\t\tthis.__next_coll_tag = 0;\n\t},\n\n\t// define a new collision tag\n\t__create_collision_tag: function(name) {\n\t\t// if already exist throw exception\n\t\tif (this.__collision_tags[name]) {\n\t\t\tthrow new SSCD.IllegalActionError(\"Collision tag named '\" + name + \"' already exist!\");\n\t\t}\n\n\t\t// set collision tag\n\t\tthis.__collision_tags[name] = 1 << this.__next_coll_tag++;\n\t},\n\n\t// all-tags flags\n\t_ALL_TAGS_VAL: Number.MAX_SAFE_INTEGER || 4294967295,\n\n\t// clean-up world memory\n\tcleanup: function() {\n\t\t// iterate over grid rows\n\t\tvar rows = Object.keys(this.__grid);\n\t\tfor (var _i = 0; _i < rows.length; ++_i) {\n\t\t\tvar i = rows[_i];\n\n\t\t\t// iterate over grid columns in current row:\n\t\t\tvar columns = Object.keys(this.__grid[i]);\n\t\t\tfor (var _j = 0; _j < columns.length; ++_j) {\n\t\t\t\tvar j = columns[_j];\n\n\t\t\t\t// if empty grid chunk delete it\n\t\t\t\tif (this.__grid[i][j].length === 0) {\n\t\t\t\t\tdelete this.__grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if no more columns are left in current row delete the row itself\n\t\t\tif (Object.keys(this.__grid[i]).length === 0) {\n\t\t\t\tdelete this.__grid[i];\n\t\t\t}\n\t\t}\n\t},\n\n\t// get the hash value of a list of collision tags or individual tag\n\t// tags can either be a single string or a list of strings\n\t__get_tags_value: function(tags) {\n\t\t// special case: undefined return all possible tags\n\t\tif (tags === undefined) {\n\t\t\treturn this._ALL_TAGS_VAL;\n\t\t}\n\n\t\t// single tag:\n\t\tif (typeof tags === \"string\") {\n\t\t\treturn this.__collision_tag(tags);\n\t\t}\n\n\t\t// else, assume a list\n\t\tvar ret = 0;\n\t\tfor (var i = 0; i < tags.length; ++i) {\n\t\t\tret |= this.__collision_tag(tags[i]);\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// return the value of a single collision tag, define it if not exist\n\t__collision_tag: function(name) {\n\t\t// if tag doesn't exist create it\n\t\tif (this.__collision_tags[name] === undefined) {\n\t\t\tthis.__create_collision_tag(name);\n\t\t}\n\n\t\t// return collision tag\n\t\treturn this.__collision_tags[name];\n\t},\n\n\t// get the grid range that this object touches\n\t__get_grid_range: function(obj) {\n\t\t// get bounding box\n\t\tvar aabb = obj.get_aabb();\n\n\t\t// calc all grid chunks this shape touches\n\t\tvar min_i = Math.floor((aabb.position.x) / this.__params.grid_size);\n\t\tvar min_j = Math.floor((aabb.position.y) / this.__params.grid_size);\n\t\tvar max_i = Math.floor((aabb.position.x + aabb.size.x) / this.__params.grid_size);\n\t\tvar max_j = Math.floor((aabb.position.y + aabb.size.y) / this.__params.grid_size);\n\n\t\t// return grid range\n\t\treturn {\n\t\t\tmin_x: min_i,\n\t\t\tmin_y: min_j,\n\t\t\tmax_x: max_i,\n\t\t\tmax_y: max_j\n\t\t};\n\t},\n\n\t// add collision object to world\n\tadd: function(obj) {\n\t\t// if object already in world throw exception\n\t\tif (obj.__world) {\n\t\t\tthrow new SSCD.IllegalActionError(\"Object to add is already in a collision world!\");\n\t\t}\n\n\t\t// get grid range\n\t\tvar grids = this.__get_grid_range(obj);\n\n\t\t// add shape to all grid parts\n\t\tfor (var i = grids.min_x; i <= grids.max_x; ++i) {\n\t\t\tfor (var j = grids.min_y; j <= grids.max_y; ++j) {\n\t\t\t\t// make sure lists exist\n\t\t\t\tthis.__grid[i] = this.__grid[i] || {};\n\t\t\t\tthis.__grid[i][j] = this.__grid[i][j] || [];\n\n\t\t\t\t// get current grid chunk\n\t\t\t\tvar curr_grid_chunk = this.__grid[i][j];\n\n\t\t\t\t// add object to grid chunk\n\t\t\t\tcurr_grid_chunk.push(obj);\n\n\t\t\t\t// add chunk to shape chunks list\n\t\t\t\tobj.__grid_chunks.push(curr_grid_chunk);\n\t\t\t}\n\t\t}\n\n\t\t// set world and grid chunks boundaries\n\t\tobj.__world = this;\n\t\tobj.__grid_bounderies = grids;\n\t\tobj.__last_insert_aabb = obj.get_aabb().clone();\n\n\t\t// add to list of all shapes\n\t\tthis.__all_shapes[obj.get_id()] = obj;\n\n\t\t// return the newly added object\n\t\treturn obj;\n\t},\n\n\t// return all shapes in world\n\tget_all_shapes: function() {\n\t\tvar ret = [];\n\t\tfor (var key in this.__all_shapes) {\n\t\t\tif (this.__all_shapes.hasOwnProperty(key)) {\n\t\t\t\tret.push(this.__all_shapes[key]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t},\n\n\t// remove object from world\n\tremove: function(obj) {\n\t\t// if object is not in this world throw exception\n\t\tif (obj.__world !== this) {\n\t\t\tthrow new SSCD.IllegalActionError(\"Object to remove is not in this collision world!\");\n\t\t}\n\n\t\t// remove from all the grid chunks\n\t\tfor (var i = 0; i < obj.__grid_chunks.length; ++i) {\n\t\t\t// get current grid chunk\n\t\t\tvar grid_chunk = obj.__grid_chunks[i];\n\n\t\t\t// remove object from grid\n\t\t\tfor (var j = 0; j < grid_chunk.length; ++j) {\n\t\t\t\tif (grid_chunk[j] === obj) {\n\t\t\t\t\tgrid_chunk.splice(j, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// remove from list of all shapes\n\t\tdelete this.__all_shapes[obj.get_id()];\n\n\t\t// clear shape world chunks and world pointer\n\t\tobj.__grid_chunks = [];\n\t\tobj.__world = null;\n\t\tobj.__grid_bounderies = null;\n\t\tobj.__last_insert_aabb = null;\n\t},\n\n\t// update object grid when it moves or resize etc.\n\t// this function is used internally by the collision shapes.\n\t__update_shape_grid: function(obj) {\n\t\tvar curr_aabb = obj.get_aabb();\n\t\tif (this.__params.grid_error === 0 ||\n\t\t\t((Math.abs(curr_aabb.position.x - obj.__last_insert_aabb.position.x) > this.__params.grid_error) ||\n\t\t\t\t(Math.abs(curr_aabb.position.y - obj.__last_insert_aabb.position.y) > this.__params.grid_error) ||\n\t\t\t\t(Math.abs(curr_aabb.size.x - obj.__last_insert_aabb.size.x) > this.__params.grid_error) ||\n\t\t\t\t(Math.abs(curr_aabb.size.y - obj.__last_insert_aabb.size.y) > this.__params.grid_error))) {\n\t\t\tthis.remove(obj);\n\t\t\tthis.add(obj);\n\t\t}\n\t},\n\n\t// check collision and return first object found.\n\t// obj: object to check collision with (vector or collision shape)\n\t// collision_tags: optional single or multiple tags to check collision with\n\t// return: first object collided with, or null if don't collide with anything\n\tpick_object: function(obj, collision_tags) {\n\t\tvar outlist = [];\n\t\tif (this.test_collision(obj, collision_tags, outlist, 1)) {\n\t\t\treturn outlist[0];\n\t\t}\n\t\treturn null;\n\t},\n\n\t// test collision with vector or object\n\t// @param obj: object to check collision with, can be either Vector (for point collision) or any collision shape.\n\t// @param collision_tags: optional string or list of strings of tags to match collision with. if undefined will accept all tags\n\t// @param out_list: optional output list. if provided, will be filled with all objects collided with. note: collision is more efficient if not provided.\n\t// @param ret_objs_count: if provided, will limit returned objects to given count.\n\t// @return true if collided with anything, false otherwise.\n\ttest_collision: function(obj, collision_tags, out_list, ret_objs_count) {\n\t\t// default collision flags\n\t\tcollision_tags = this.__get_tags_value(collision_tags);\n\n\t\t// handle vector\n\t\tif (obj instanceof SSCD.Vector) {\n\t\t\treturn this.__test_collision_point(obj, collision_tags, out_list, ret_objs_count);\n\t\t}\n\t\t// handle collision with shape\n\t\tif (obj.is_shape) {\n\t\t\treturn this.__test_collision_shape(obj, collision_tags, out_list, ret_objs_count);\n\t\t}\n\t},\n\n\n\t// test collision with a field of view.\n\t// a field of view is basically a pizza-like shape starting from the center.\n\t// @param position: source position (vector).\n\t// @param distance: fov distance.\n\t// @param direction: look-at direction in degrees (0 = looking right, 90 = looking down, etc.).\n\t// @param fov_angle: angle range in degrees.\n\t// @param collision_tags: optional string or list of strings of tags to match collision with. if undefined will accept all tags\n\t// @param out_list: optional output list. if provided, will be filled with all objects collided with. note: collision is more efficient if not provided.\n\t// @return true if collided with anything, false otherwise.\n\ttest_fov: function(position, distance, direction, fov_angle, collision_tags, out_list) {\n\t\t// default collision flags\n\t\tcollision_tags = this.__get_tags_value(collision_tags);\n\n\t\t// default out-list if not provided\n\t\tout_list = out_list || [];\n\n\t\t// create a circle and check basic collision with it\n\t\tvar circle = new SSCD.Circle(position, distance);\n\t\tthis.__test_collision_shape(circle, collision_tags, out_list);\n\n\t\t// now iterate over collided objects and check angle\n\t\tfor (var i = out_list.length - 1; i >= 0; --i) {\n\t\t\t// get angle between source position and the body\n\t\t\tvar angle = position.angle_from(out_list[i].__position);\n\t\t\tif (SSCD.Math.angles_dis(direction, angle) > fov_angle) {\n\t\t\t\tout_list.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\t// return if got collision\n\t\treturn out_list.length > 0;\n\t},\n\n\t// test collision for given point\n\t// see test_collision comment for more info\n\t__test_collision_point: function(vector, collision_tags_val, out_list, ret_objs_count) {\n\t\t// get current grid size\n\t\tvar grid_size = this.__params.grid_size;\n\n\t\t// get the grid chunk to test collision with\n\t\tvar i = Math.floor((vector.x) / grid_size);\n\t\tvar j = Math.floor((vector.y) / grid_size);\n\n\t\t// if grid chunk is not in use return empty list\n\t\tif (this.__grid[i] === undefined || this.__grid[i][j] === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// get current grid chunk\n\t\tvar grid_chunk = this.__grid[i][j];\n\n\t\t// iterate over all objects in current grid chunk and add them to render list\n\t\tvar found = 0;\n\t\tfor (var i = 0; i < grid_chunk.length; ++i) {\n\t\t\t// get current object to test\n\t\t\tvar curr_obj = grid_chunk[i];\n\n\t\t\t// if collision tags don't match skip this object\n\t\t\tif (!curr_obj.collision_tags_match(collision_tags_val)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// if collide with object:\n\t\t\tif (this.__do_collision(curr_obj, vector)) {\n\t\t\t\t// if got collision list to fill, add object and set return value to true\n\t\t\t\tif (out_list) {\n\t\t\t\t\tfound++;\n\t\t\t\t\tout_list.push(curr_obj);\n\t\t\t\t\tif (ret_objs_count && found >= ret_objs_count) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// if don't have collision list to fill simply return true\n\t\t\t\telse {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// return if collided \n\t\t// note: get here only if got list to fill or if no collision found\n\t\treturn found > 0;\n\t},\n\n\t// test collision with other shape\n\t// see test_collision comment for more info\n\t__test_collision_shape: function(obj, collision_tags_val, out_list, ret_objs_count) {\n\t\tvar grid;\n\n\t\t// if shape is in this world, use its grid range from cache\n\t\tif (obj.__world === this) {\n\t\t\tgrid = obj.__grid_bounderies;\n\t\t}\n\t\t// if not in world, generate grid range\n\t\telse {\n\t\t\tgrid = this.__get_grid_range(obj);\n\t\t}\n\n\t\t// for return value\n\t\tvar found = 0;\n\n\t\t// so we won't test same objects multiple times\n\t\tvar already_tests = {};\n\n\t\t// iterate over grid this shape touches\n\t\tfor (var i = grid.min_x; i <= grid.max_x; ++i) {\n\t\t\t// skip empty rows\n\t\t\tif (this.__grid[i] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// iterate on current grid row\n\t\t\tfor (var j = grid.min_y; j <= grid.max_y; ++j) {\n\t\t\t\tvar curr_grid_chunk = this.__grid[i][j];\n\n\t\t\t\t// skip empty grid chunks\n\t\t\t\tif (curr_grid_chunk === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// iterate over objects in grid chunk and check collision\n\t\t\t\tfor (var x = 0; x < curr_grid_chunk.length; ++x) {\n\t\t\t\t\t// get current object\n\t\t\t\t\tvar curr_obj = curr_grid_chunk[x];\n\n\t\t\t\t\t// make sure object is not self\n\t\t\t\t\tif (curr_obj === obj) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if this object was already tested\n\t\t\t\t\tif (already_tests[curr_obj.get_id()]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\talready_tests[curr_obj.get_id()] = true;\n\n\t\t\t\t\t// if collision tags don't match skip this object\n\t\t\t\t\tif (!curr_obj.collision_tags_match(collision_tags_val)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if collide with object:\n\t\t\t\t\tif (this.__do_collision(curr_obj, obj)) {\n\t\t\t\t\t\t// if got collision list to fill, add object and set return value to true\n\t\t\t\t\t\tif (out_list) {\n\t\t\t\t\t\t\tfound++;\n\t\t\t\t\t\t\tout_list.push(curr_obj);\n\t\t\t\t\t\t\tif (ret_objs_count && found >= ret_objs_count) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if don't have collision list to fill simply return true\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t// return if collided \n\t\t// note: get here only if got list to fill or if no collision found\n\t\treturn found > 0;\n\t},\n\n\t// do actual collision check between source and target\n\t__do_collision: function(src, target) {\n\t\treturn src.test_collide_with(target);\n\t},\n\n\t// debug-render all the objects in world\n\t// canvas: a 2d canvas object to render on.\n\t// camera_pos: optional, vector that represent the current camera position is 2d space.\n\t// show_grid: default to true, if set will render background grid that shows which grid chunks are currently active\n\t// show_aabb: default to true, if set will render objects axis-aligned bounding boxes\n\t// NOTE: this function will NOT clear canvas before rendering, if you render within a main loop its your responsibility.\n\trender: function(canvas, camera_pos, show_grid, show_aabb) {\n\t\t// set default camera pos if doesn't exist\n\t\tcamera_pos = camera_pos || SSCD.Vector.ZERO;\n\n\t\t// set default show_grid and show_aabb\n\t\tif (show_grid === undefined) {\n\t\t\tshow_grid = true;\n\t\t}\n\t\tif (show_aabb === undefined) {\n\t\t\tshow_aabb = true;\n\t\t}\n\n\t\t// get ctx and reset previous transformations\n\t\tvar ctx = canvas.getContext('2d');\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\n\t\t// get current grid size\n\t\tvar grid_size = this.__params.grid_size;\n\n\t\t// get grid parts that are visible based on canvas size and camera position\n\t\tvar min_i = Math.floor((camera_pos.x) / grid_size);\n\t\tvar min_j = Math.floor((camera_pos.y) / grid_size);\n\t\tvar max_i = min_i + Math.ceil(canvas.width / grid_size);\n\t\tvar max_j = min_j + Math.ceil(canvas.height / grid_size);\n\n\t\t// a list of objects to render\n\t\tvar render_list = [];\n\n\t\t// iterate over grid\n\t\tfor (var i = min_i; i <= max_i; ++i) {\n\n\t\t\t// go over grid row\n\t\t\tfor (var j = min_j; j <= max_j; ++j) {\n\t\t\t\t// get current grid chunk\n\t\t\t\tvar curr_grid_chunk = undefined;\n\t\t\t\tif (this.__grid[i]) {\n\t\t\t\t\tcurr_grid_chunk = this.__grid[i][j];\n\t\t\t\t}\n\n\t\t\t\t// render current grid chunk\n\t\t\t\tif (show_grid) {\n\t\t\t\t\tvar position = new SSCD.Vector(i * grid_size, j * grid_size).sub_self(camera_pos);\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.rect(position.x, position.y, grid_size - 1, grid_size - 1);\n\t\t\t\t\tctx.lineWidth = \"1\";\n\t\t\t\t\tif ((curr_grid_chunk === undefined) || (curr_grid_chunk.length === 0)) {\n\t\t\t\t\t\tctx.strokeStyle = 'rgba(100, 100, 100, 0.255)';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n\t\t\t\t\t}\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\n\t\t\t\t// if current grid chunk has no objects skip\n\t\t\t\tif (curr_grid_chunk === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// iterate over all objects in current grid chunk and add them to render list\n\t\t\t\tfor (var x = 0; x < curr_grid_chunk.length; ++x) {\n\t\t\t\t\tvar curr_obj = curr_grid_chunk[x];\n\t\t\t\t\tif (render_list.indexOf(curr_obj) === -1) {\n\t\t\t\t\t\trender_list.push(curr_grid_chunk[x]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// now render all objects in render list\n\t\tfor (var i = 0; i < render_list.length; ++i) {\n\t\t\trender_list[i].render(ctx, camera_pos);\n\t\t\tif (show_aabb) {\n\t\t\t\trender_list[i].render_aabb(ctx, camera_pos);\n\t\t\t}\n\t\t}\n\t},\n};\n\n\n// for illegal action exception\nSSCD.IllegalActionError = function(message) {\n\tthis.name = \"Illegal Action\";\n\tthis.message = (message || \"\");\n};\nSSCD.IllegalActionError.prototype = Error.prototype;\n", "/*\n * Tilemap is a special type of collision world, optimized specifically for a 2d tilemap.\n * Author: Ronen Ness, 2015\n */\n \n// a collision world. you create an instance of this class and add bodies to it to check collision.\n// @param tile_size: size, in pixels, of a single tile\n// @param additional_params: extra params. see SSCD.World for more info.\nimport {SSCD} from \"./sscdNameSpace.js\"\n\nSSCD.TilemapWorld = function(tile_size, additional_params) {\n\n\t// set defaults\n\tvar params = additional_params;\n\tparams = params || {};\n\tparams.grid_size = tile_size;\n\tthis.__tiles = {};\n\tthis.__init_world(params);\n};\n\n// tilemap collision world\nSSCD.TilemapWorld.prototype = {\n\n\t// set if a tile blocks or not.\n\t// @param index - the x and y index of the tile to set (vector).\n\t// @param collision - true if to put a collision shape on this tile, false otherwise.\n\t// @param tags - optional tags to apply on tile, if collision is set to true (note: null to reset tags).\n\tset_tile: function(index, collision, tags) {\n\t\t// if already have shape, get it\n\t\tvar shape = this.get_tile(index);\n\n\t\t// if requested to remove the collision from this tile, do it\n\t\tif (!collision) {\n\t\t\tif (shape) {\n\t\t\t\tthis.__set_tile_shape(index, null);\n\t\t\t\tthis.remove(shape);\n\t\t\t\t//delete shape;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// if got here it means we need to set collision / update tags for this tile.\n\t\t// first, check if need to create new collision shape.\n\t\tif (shape === undefined) {\n\t\t\t// calc position and size of the shape\n\t\t\tvar tilesize = this.__params.grid_size;\n\t\t\tvar position = index.multiply_scalar(tilesize);\n\t\t\tvar size = new SSCD.Vector(tilesize, tilesize);\n\n\t\t\t// create and add the shape\n\t\t\tshape = this.__add_tile_shape(new SSCD.Rectangle(position, size), index);\n\t\t\tthis.__set_tile_shape(index, shape);\n\t\t}\n\n\t\t// set collision tags\n\t\tif (tags !== undefined) {\n\t\t\tshape.set_collision_tags(tags);\n\t\t}\n\t},\n\n\t// add collision tile (for internal usage).\n\t// @param obj - object to add to the tile.\n\t// @param index - tile index.\n\t__add_tile_shape: function(obj, index) {\n\n\t\t// make sure lists exist\n\t\tthis.__grid[index.x] = this.__grid[index.x] || {};\n\t\tthis.__grid[index.x][index.y] = this.__grid[index.x][index.y] || [];\n\n\t\t// get current grid chunk\n\t\tvar curr_grid_chunk = this.__grid[index.x][index.y];\n\n\t\t// add object to grid chunk\n\t\tcurr_grid_chunk.push(obj);\n\n\t\t// add chunk to shape chunks list\n\t\tobj.__grid_chunks = [curr_grid_chunk];\n\n\t\t// set world and grid chunks boundaries\n\t\tobj.__world = this;\n\t\tobj.__grid_bounderies = {\n\t\t\tmin_x: index.x,\n\t\t\tmin_y: index.y,\n\t\t\tmax_x: index.x,\n\t\t\tmax_y: index.y\n\t\t};\n\t\t// obj.__last_insert_aabb = obj.get_aabb().clone();\n\n\t\t// add to list of all shapes\n\t\tthis.__all_shapes[obj.get_id()] = obj;\n\n\t\t// return the newly added object\n\t\treturn obj;\n\t},\n\n\t// set tilemap from a matrix (array of arrays).\n\t// @param matrix is the matrix to set, every 1 will be collision, every 0 will not collide. (note: true and false works too).\n\tset_from_matrix: function(matrix) {\n\t\tvar index = new SSCD.Vector(0, 0);\n\t\tfor (var i = 0; i < matrix.length; ++i) {\n\t\t\tindex.x = 0;\n\t\t\tfor (var j = 0; j < matrix[i].length; ++j) {\n\t\t\t\tthis.set_tile(index, matrix[i][j]);\n\t\t\t\tindex.x++;\n\t\t\t}\n\t\t\tindex.y++;\n\t\t}\n\t},\n\n\t// get the collision shape of a tile (or undefined if have no collision shape on this tile).\n\t// @param index - the x and y index of the tile to get.\n\tget_tile: function(index) {\n\t\treturn this.__tiles[index.x + \"_\" + index.y];\n\t},\n\n\t// set the collision shape of a tile.\n\t// @param index - tile index.\n\t// @param shape - shape to set.\n\t__set_tile_shape: function(index, shape) {\n\t\tif (shape === null) {\n\t\t\tdelete this.__tiles[index.x + \"_\" + index.y];\n\t\t} else {\n\t\t\tthis.__tiles[index.x + \"_\" + index.y] = shape;\n\t\t}\n\t},\n\n};\n\n// inherit from basic world class.\nSSCD.extend(SSCD.World.prototype, SSCD.TilemapWorld.prototype);\n", "//import {sscd as SSCD} from 'sscd';\r\nimport {SSCD} from '../src/sscd';\r\n//declare const SSCD:any;\r\nimport {Point2} from \"basictypes\";\r\nimport {EventEmitter} from \"eventemitter3\";\r\n\r\ninterface SSCDBody{\r\n    set_position(vector);\r\n    get_position();\r\n    get_aabb():{position:Point2,size:Point2};\r\n    get_data():any\r\n    set_data(data:any)\r\n}\r\n\r\nconst ADD = \"ADD\";\r\nconst REMOVE = \"REMOVE\";\r\n\r\nexport class SimpleCollisionDetection {\r\n    private world: any;\r\n    private emitter = new EventEmitter();\r\n\r\n    getType(): string {\r\n        //https://github.com/RonenNess/SSCD.js/\r\n        return SimpleCollisionDetection.name;\r\n    }\r\n\r\n    constructor() {\r\n        this.world = new SSCD.World();\r\n    }\r\n\r\n    onAdd(callback:(param: SSCDBody)=>void):()=>void{\r\n        this.emitter.on(ADD,callback);\r\n        return ()=>{\r\n            this.emitter.off(ADD,callback);\r\n        }\r\n    }\r\n\r\n    onRemove(callback:(param: SSCDBody)=>void):()=>void{\r\n        this.emitter.on(REMOVE,callback);\r\n        return ()=>{\r\n            this.emitter.off(REMOVE,callback);\r\n        }\r\n    }\r\n\r\n    register(param: SSCDBody) {\r\n        this.world.add(param);\r\n        this.emitter.emit(ADD,param);\r\n    }\r\n\r\n    unregister(param: SSCDBody) {\r\n        this.world.remove(param);\r\n        this.emitter.emit(REMOVE,param);\r\n    }\r\n\r\n    getObjectAt({x,y}: Point2):any {\r\n        let obj = this.world.pick_object(new SSCD.Vector(x, y));\r\n        return obj?obj.get_data():null;\r\n    }\r\n\r\n    getObjectIn({x,y}: Point2, radius):any[] {\r\n        let collision_list = [];\r\n        let shape = new SSCD.Circle(new SSCD.Vector(x, y), radius);\r\n        this.world.test_collision(shape, undefined, collision_list)\r\n        return collision_list.map(obj => {\r\n            return obj ? obj.get_data() : null;\r\n        });\r\n    }\r\n\r\n    getWorld() {\r\n        return this.world;\r\n    }\r\n}\r\n", "export const SimpleCollisionDetectionName = Symbol.for(\"SimpleCollisionDetectionName\");\r\n"],
  "mappings": "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",
  "names": ["Binding", "MetadataReader", "Context", "Metadata", "Plan", "LazyServiceIdentifer", "QueryableString", "Target", "Request", "FactoryType", "BindingWhenSyntax", "BindingOnSyntax", "BindingWhenOnSyntax", "BindingInSyntax", "BindingInWhenOnSyntax", "BindingToSyntax", "ContainerSnapshot", "Lookup", "ModuleActivationStore", "Container", "module", "ContainerModule", "AsyncContainerModule", "m", "interfaces", "EventEmitter"]
}
